package com.example.demo.service;

import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

import com.example.demo.dao.CuentaDAO;
import com.example.demo.dao.MovimientosDAO;
import com.example.demo.dao.MovimientosDTO;
import com.example.demo.entidades.Cuenta;
import com.example.demo.entidades.Movimientos;

@Service
public class MovimientosService {

	@Autowired
	private MovimientosDAO movimientosDAO;
	@Autowired
	private CuentaDAO cuentaDAO;
	
	@KafkaListener(topics="movimientos", groupId = "my-group")
	public void listenerMovimientos(MovimientosDTO movimientosDTO) {
		//Registro movimientos
		System.out.println(" MENSAJE RECIBIDO Creacion movimientos ");
		registrarMovimientos(movimientosDTO);
	}
	
	private void registrarMovimientos(MovimientosDTO movimientosDTO) {
		
		Movimientos movimientos = new Movimientos();
		movimientos.setCuenta(movimientosDTO.getCuenta());
		movimientos.setTipoMovimiento(movimientosDTO.getTipo());
		movimientos.setValor(movimientosDTO.getMonto());
		Double saldoPosterior = obtenerSaldoActualAfterTransaction(movimientosDTO);
		movimientos.setSaldo(saldoPosterior);
		movimientos.setFechaMovimiento(new Date());
		movimientosDAO.save(movimientos);
		
	}
	
	private Double obtenerSaldoActualAfterTransaction(MovimientosDTO movimientosDTO) {
		Double saldoActual = 0.0;
		Cuenta cuenta = cuentaDAO.obtenerCuentaByNumCuenta(movimientosDTO.getCuenta());
		if(movimientosDTO.getMonto() < 0 ) {
			Double montoTransaccion = movimientosDTO.getMonto() * -1;
			//Se resta
			saldoActual = cuenta.getSaldoInicial() - montoTransaccion;
		}else {
			saldoActual = cuenta.getSaldoInicial() + movimientosDTO.getMonto();
		}
		
		if(saldoActual >= 0.0) {
			cuenta.setSaldoInicial(saldoActual);
		}
		return saldoActual;
	}
}
