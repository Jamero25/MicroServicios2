package com.example.demo.webservice;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.concurrent.MonoToListenableFutureAdapter;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.dao.ClienteDTO;
import com.example.demo.entity.Cliente;
import com.example.demo.service.IClienteService;

import reactor.core.publisher.Mono;

@RestController
@RequestMapping("/api")
public class ClientesWebService {

	@Autowired
	private IClienteService clienteService;
	
	@PostMapping("/clientes")
	public String registrarCliente(@RequestBody ClienteDTO clienteDTO) {
		String respuesta= "";
		if(clienteDTO.getIdentificacion() != null) {
			
			System.out.println( "IDEN" + clienteDTO.getIdentificacion());
			//Validamos que el cliente ya no se encuentre en bdd
			
			clienteService.guardarClienteNuevo(clienteDTO);
			respuesta = "Cliente registrado con Ã©xito";
			
		}
		return respuesta;
	}
	
	
	@GetMapping("/clientes/{id}")
	public Cliente consultarClienteById(@PathVariable Long id){
		return clienteService.obtenerclientById(id);
	}
	
	@PutMapping("/clientes/{id}")
	public Cliente actualizarClienteById(@RequestBody ClienteDTO clienteDTO, @PathVariable("id") Long id) {
		return clienteService.actualizarClienteById(clienteDTO, id);
	}
	
	
}
